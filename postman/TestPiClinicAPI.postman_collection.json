{
	"info": {
		"_postman_id": "19d7e6c2-2f5a-4ff3-984c-7751448ca891",
		"name": "TestPiClinicAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Global initialization",
			"item": [
				{
					"name": "Global Init",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1135443f-87af-4084-8217-0a43d88c9e74",
								"exec": [
									" var varRandomString = function randomString(textLength) {\r",
									"    if (textLength === null) {\r",
									"        textLength = 16;\r",
									"    }\r",
									"    var text = \"\";\r",
									"    var legal = \"AÁBCDEÉFGHIÍJKLMNÑOÓPQRSTUÚVWXYZaábcdeéfghiíjklmnñoópqrstuúvwxyz0123456789-¡!?¿\";\r",
									"\r",
									"  for (var i = 0; i < textLength; i++)\r",
									"    text += legal.charAt(Math.floor(Math.random() * legal.length));\r",
									"\r",
									"  return text;\r",
									"}\r",
									"\r",
									"postman.setEnvironmentVariable ('fnRandomString', varRandomString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/phpinfo.php",
							"host": [
								"{{host}}"
							],
							"path": [
								"phpinfo.php"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Method File Access Test",
			"item": [
				{
					"name": "log",
					"item": [
						{
							"name": "log_common script access test Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/log_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log_common.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log_common.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "log_get script access test Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/log_get.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log_get.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log_get.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "log_post script access test Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/log_post.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log_post.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log_post.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session",
					"item": [
						{
							"name": "session_common script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/session_common .php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session_common .php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session_common .php"
									]
								}
							},
							"response": []
						},
						{
							"name": "session_post script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/session_post.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session_post.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session_post.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "session_get script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/session_get.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session_get.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session_get.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "session_delete script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/session_delete.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session_delete.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session_delete.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Staff",
					"item": [
						{
							"name": "staff_common script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff_common.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff_common.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff_delete script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_delete.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff_delete.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff_delete.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff_get script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_get.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff_get.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff_get.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff_patch script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_patch.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff_patch.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff_patch.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "staff_post script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_post.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff_post.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff_post.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Comment",
					"item": [
						{
							"name": "comment_common script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/comment_common.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment_common.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "comment_get script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_get.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/comment_get.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment_get.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "comment_post script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_post.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/comment_post.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment_post.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Textmsg",
					"item": [
						{
							"name": "textmsg_common script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg_common.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg_common.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "textmsg_delete script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_delete.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg_delete.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg_delete.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "textmsg_get script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_get.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg_get.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg_get.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "textmsg_patch script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_patch.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg_patch.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg_patch.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "textmsg_post script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_post.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg_post.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg_post.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Patient",
					"item": [
						{
							"name": "patient_common script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient_common.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient_common.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "patient_delete script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_delete.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient_delete.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient_delete.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "patient_get script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_get.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient_get.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient_get.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "patient_patch script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_patch.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient_patch.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient_patch.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "patient_post script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/staff_post.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient_post.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient_post.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Shared",
					"item": [
						{
							"name": "shared dbUtils script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/shared/dbUtils.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"shared",
										"dbUtils.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "shared logUtils script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/shared/logUtils.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"shared",
										"logUtils.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "shared piClinicConfig script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/shared/piClinicConfig.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"shared",
										"piClinicConfig.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "shared profile script access test API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/shared/profile.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"shared",
										"profile.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "shared security script access test API Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50621ed2-48a2-4475-9060-ad6e9a80747a",
										"exec": [
											"pm.test(\"api/comment_common.php access denial check was successful\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/shared/security.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"shared",
										"security.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Session login/out",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get testUser token API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as test user"
							},
							"response": []
						},
						{
							"name": "Get Session Access API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d621b809-21f4-4468-84e3-8b683b1b899d",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Change session language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d75c8f84-745b-424a-b957-bd74130a6234",
										"exec": [
											"pm.test(\"Language change was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Language is now Spanish\", function() {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.sessionLanguage).to.eql('es');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?sessionLanguage=es",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "sessionLanguage",
											"value": "es"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change session clinic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d75c8f84-745b-424a-b957-bd74130a6234",
										"exec": [
											"pm.test(\"Language change was sucessful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Clinic has been updated\", function() {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.sessionClinicPublicID).to.eql('710');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?sessionClinicPublicID=710",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "sessionClinicPublicID",
											"value": "710"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Error Tests",
					"item": [
						{
							"name": "Patch Session Access Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Session Access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{InvalidToken_Format}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Invalid Token Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2314ddae-dad4-4e7f-bc8f-2c55e54243f2",
										"exec": [
											"pm.test(\"Log retrieved successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"SA account is ready to read log.\", function() {\r",
											"    var saToken = pm.variables.get(\"SAtoken\");\r",
											"    pm.expect(pm.variables.get(\"SAtoken\")).to.not.eql(undefined);    \r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var lastMessage = null;\r",
											"\r",
											"if (jsonData.count > 1) {\r",
											"    lastMessage = jsonData.data[0];\r",
											"} else {\r",
											"    lastMessage = jsonData.data;    \r",
											"}\r",
											"\r",
											"/*\r",
											"* Commented out for now. \r",
											"* This assumes the most recent log entry will be the desired one and so it\r",
											"*  fails in concurrent testing due to log-file latency,\r",
											"*\r",
											"\r",
											"pm.test(\"Log message correct.\", function() {\r",
											"    pm.expect(lastMessage.logStatusMessage).to.not.eql(undefined);\r",
											"    pm.expect(lastMessage.logStatusMessage.indexOf('Invalid token')).to.be.above(0);\r",
											"});\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "daa25259-bd11-4d7a-95ec-60dd82f6deb6",
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{SAtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{InvalidToken_Format}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Invalid Token Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2314ddae-dad4-4e7f-bc8f-2c55e54243f2",
										"exec": [
											"pm.test(\"Log retrieved successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var lastMessage = null;\r",
											"\r",
											"if (jsonData.count > 1) {\r",
											"    lastMessage = jsonData.data[0];\r",
											"} else {\r",
											"    lastMessage = jsonData.data;    \r",
											"}\r",
											"\r",
											"/*\r",
											"* Commented out for now. \r",
											"* This assumes the most recent log entry will be the desired one and so it\r",
											"*  fails in concurrent testing due to log-file latency,\r",
											"*\r",
											"\r",
											"pm.test(\"Log message correct.\", function() {\r",
											"     pm.expect(lastMessage.logStatusMessage.indexOf('Invalid token')).to.be.above(0);\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{SAtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Admin access tests",
					"item": [
						{
							"name": "Get current user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"currentUserToken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get regular user token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"regularUserToken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username=TestCS&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "TestCS"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as TestUser"
							},
							"response": []
						},
						{
							"name": "Current user access regular user session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Session query was successful\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if (userAcct == 'TestSA') {\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Session data was correct\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if (userAcct == 'TestSA') {\r",
											"        pm.expect(jsonData.data.sessionID).to.not.eql(undefined);\r",
											"    } else {\r",
											"        pm.expect(jsonData.data.sessionID).to.eql(undefined);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{currentUserToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?token={{regularUserToken}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "token",
											"value": "{{regularUserToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Regular user access current user session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Session query was prevented\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Session data was correct\", function() {\r",
											"    pm.expect(jsonData.data.token).to.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{regularUserToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?token={{currentUserToken}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "token",
											"value": "{{currentUserToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Close current user session API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{currentUserToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current user Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{currentUserToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close regular user session API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{regularUserToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get regular user Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{regularUserToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Log API Test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "LogTest-BasicFields (SystemAdmin only)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c658880-e599-455f-84b1-9dac32436384",
										"exec": [
											"pm.test(\"Writing basic fields was successful\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if (userAcct == 'TestSA') {\r",
											"        pm.response.to.have.status(201);\r",
											"    } else {\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										},
										{
											"key": "userToken",
											"value": "{{token}}",
											"type": "text"
										},
										{
											"key": "sourceModule",
											"value": "_TEST_",
											"type": "text"
										},
										{
											"key": "logClass",
											"value": "AUTOTEST",
											"type": "text"
										},
										{
											"key": "logTable",
											"value": "_TEST_",
											"type": "text"
										},
										{
											"key": "logAction",
											"value": "POST",
											"type": "text"
										},
										{
											"key": "logStatusMessage",
											"value": "{{testMessage}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log Test-ReadBasicFields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b579dd39-b1c7-444b-a3e7-84d1244b184b",
										"exec": [
											"pm.test(\"Basic Fields read was successful\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') ||  (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
											"        // staff cam read, but can't create so the user is not found\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Basic Fields read data was correct\", function() {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if (userAcct == 'TestSA') {\r",
											"        pm.expect(jsonData.data.logStatusMessage).to.eql(pm.testMessage);\r",
											"    } else {\r",
											"        pm.expect(1).to.eql(1); // don't test the value if not authorized\r",
											"    }    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php?usertoken={{SAtoken}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									],
									"query": [
										{
											"key": "usertoken",
											"value": "{{SAtoken}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Error Tests",
					"item": [
						{
							"name": "Get Log Access  Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get log access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{InvalidToken_Format}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Invalid Token Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2314ddae-dad4-4e7f-bc8f-2c55e54243f2",
										"exec": [
											"pm.test(\"Log retrieved successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var lastMessage = null;\r",
											"\r",
											"if (jsonData.count > 1) {\r",
											"    lastMessage = jsonData.data[0];\r",
											"} else {\r",
											"    lastMessage = jsonData.data;    \r",
											"}\r",
											"\r",
											"/*\r",
											"* Commented out for now. \r",
											"* This assumes the most recent log entry will be the desired one and so it\r",
											"*  fails in concurrent testing due to log-file latency,\r",
											"*\r",
											"\r",
											"pm.test(\"Log message correct.\", function() {\r",
											"     pm.expect(lastMessage.logStatusMessage.indexOf('Invalid token')).to.be.above(0);\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{SAtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2232b22-b1ba-4495-8275-3d6496fbcfff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8d350a22-3a13-4006-b325-14271398e18f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Staff API Test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Create new Staff member",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dc1b9d4-2bad-4163-8228-4ee3e03674aa",
										"exec": [
											"pm.test(\"New user creation successful\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // save new username to use in subsequent calls\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.variables.set(\"newUser\", jsonData.data.username);\r",
											"        // this shoult be successful\r",
											"        pm.response.to.have.status(201);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "testUser-{{$guid}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{TestPassword}}",
											"type": "text"
										},
										{
											"key": "lastName",
											"value": "TestUser{{$randomInt}}",
											"type": "text"
										},
										{
											"key": "firstName",
											"value": "FirstName",
											"type": "text"
										},
										{
											"key": "accessGranted",
											"value": "ClinicStaff",
											"type": "text"
										},
										{
											"key": "memberID",
											"value": "Member{{$timestamp}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/staff.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get recently created user ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284f1c2c-099c-4131-b059-7ce9ec4438c5",
										"exec": [
											"pm.test(\"New user creation successful\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else if  (userAcct == 'TestCS') {\r",
											"        // staff cam read, but can't create so the user is not found\r",
											"        pm.response.to.have.status(404);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56959611-4bec-4307-bb81-35c05eeea052",
										"exec": [
											"pm.test(\"Name change  was successful\", function () {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Name change value correct\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        var jsonData = JSON.parse(responseBody);\r",
											"        pm.expect(jsonData.count).to.eql(1);\r",
											"        pm.expect(jsonData.data.lastName).to.eql(\"NewLastName\");\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"       pm.expect(1).to.eql(1);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}&lastName=NewLastName",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										},
										{
											"key": "lastName",
											"value": "NewLastName"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update preferred lang",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56959611-4bec-4307-bb81-35c05eeea052",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Preferred language change was successful\", function () {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Preferred language was changed correctly\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.expect(jsonData.data.preferredLanguage).to.eql(\"es\");\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.expect(1).to.eql(1);\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}&preferredLanguage=es",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										},
										{
											"key": "preferredLanguage",
											"value": "es"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update preferred clinic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56959611-4bec-4307-bb81-35c05eeea052",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Clinic change change was successful\", function () {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Clinic was changed correctly\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.expect(jsonData.data.preferredClinicPublicID).to.eql(\"710\");\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.expect(1).to.eql(1);\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}&preferredClinicPublicID=710",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										},
										{
											"key": "preferredClinicPublicID",
											"value": "710"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify updated last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284f1c2c-099c-4131-b059-7ce9ec4438c5",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Reading new user was successful\", function () {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else if  (userAcct == 'TestCS') {\r",
											"        // staff cam read, but can't create so the user is not found\r",
											"        pm.response.to.have.status(404);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"NewUser was changed correctly\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.expect(jsonData.data.lastName).to.eql(\"NewLastName\");\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.expect(1).to.eql(1);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deactivate new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284f1c2c-099c-4131-b059-7ce9ec4438c5",
										"exec": [
											"pm.test(\"Clinic change change was successful\", function () {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify deactivated user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284f1c2c-099c-4131-b059-7ce9ec4438c5",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var userAcct = pm.environment.get('testUser');\r",
											"\r",
											"pm.test(\"New user record found\", function () {\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"    } else if  (userAcct == 'TestCS') {\r",
											"        // staff cam read, but can't create so the user is not found\r",
											"        pm.response.to.have.status(404);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Only one user matched query\", function() {\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.expect(jsonData.count).to.eql(1);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.expect(1).to.eql(1);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"New user deactivated successfully\", function() {\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.expect(jsonData.data.active).to.not.eql(undefined);\r",
											"        pm.expect(jsonData.data.active).to.eql('0');\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.expect(1).to.eql(1);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?username={{newUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{newUser}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Error Tests",
					"item": [
						{
							"name": "Get Staff Access  Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get staff access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{InvalidToken_Format}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Invalid Token Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2314ddae-dad4-4e7f-bc8f-2c55e54243f2",
										"exec": [
											"pm.test(\"Log retrieved successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var lastMessage = null;\r",
											"\r",
											"if (jsonData.count > 1) {\r",
											"    lastMessage = jsonData.data[0];\r",
											"} else {\r",
											"    lastMessage = jsonData.data;    \r",
											"}\r",
											"\r",
											"/*\r",
											"* Commented out for now. \r",
											"* This assumes the most recent log entry will be the desired one and so it\r",
											"*  fails in concurrent testing due to log-file latency,\r",
											"*\r",
											"\r",
											"pm.test(\"Log message correct.\", function() {\r",
											"     pm.expect(lastMessage.logStatusMessage.indexOf('Invalid token')).to.be.above(0);\r",
											"});\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{SAtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Comment API Test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Post a new comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e1746f1-fc85-4b15-8f2f-1a2115c98de0",
										"exec": [
											"pm.test(\"A new comment was posted\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "AUTO_TEST",
											"type": "text"
										},
										{
											"key": "ReferringUrl",
											"value": "TestPlatform",
											"type": "text"
										},
										{
											"key": "commentText",
											"value": "This is some text from Postman. Test text:  {{$guid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/comment.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ed5651f-494a-4627-bd34-770400c1a377",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Comments were read successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Multiple comments returned\", function() {\r",
											"    pm.expect(jsonData.count).to.be.above(1);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/comment.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Error Tests",
					"item": [
						{
							"name": "Get Comment Access  Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/comment.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token check was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{InvalidToken_Format}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/comment.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comment.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test Invalid Token Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2314ddae-dad4-4e7f-bc8f-2c55e54243f2",
										"exec": [
											"pm.test(\"Log retrieved successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var lastMessage = null;\r",
											"\r",
											"if (jsonData.count > 1) {\r",
											"    lastMessage = jsonData.data[0];\r",
											"} else {\r",
											"    lastMessage = jsonData.data;    \r",
											"}\r",
											"\r",
											"/*\r",
											"* Commented out for now. \r",
											"* This assumes the most recent log entry will be the desired one and so it\r",
											"*  fails in concurrent testing due to log-file latency,\r",
											"*\r",
											"\r",
											"pm.test(\"Log message correct.\", function() {\r",
											"     pm.expect(lastMessage.logStatusMessage.indexOf('Invalid token')).to.be.above(0);\r",
											"});\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{SAtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/log.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"log.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "TextMsg API Test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Exhaust Retries",
							"item": [
								{
									"name": "Add message to queue",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New text message was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"         // this should be successful\r",
													"        pm.response.to.have.status(201);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message phone number is correct.\", function() {\r",
													"    var newDest = pm.environment.get('testTextMsgDest');\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.destNumber).to.not.eql(undefined);\r",
													"        pm.expect(jsonData.data.destNumber).to.eql(newDest);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message maxSendAttempts is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        console.log('jsonData.data.maxSendAttempts = ' + jsonData.data.maxSendAttempts);\r",
													"        pm.expect(jsonData.data.maxSendAttempts).to.not.eql(undefined);\r",
													"        pm.expect(jsonData.data.maxSendAttempts).to.eql('2');\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message retryInterval is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.retryInterval).to.not.eql(undefined);\r",
													"        pm.expect(jsonData.data.retryInterval).to.eql('10');\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Reading message GUID\", function(){\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.textmsgGUID).to.not.eql(undefined);\r",
													"        pm.variables.set(\"currentMessageGUID\", jsonData.data.textmsgGUID);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check saved message GUID\", function(){\r",
													"\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(pm.variables.get(\"currentMessageGUID\")).to.not.eql(undefined);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "messageText",
													"value": "Hi there, this is your reminder message! {{$guid}}",
													"type": "text"
												},
												{
													"key": "patientID",
													"value": "nu",
													"type": "text",
													"disabled": true
												},
												{
													"key": "destNumber",
													"value": "{{testTextMsgDest}}",
													"type": "text"
												},
												{
													"key": "sendService",
													"value": "LocalMobile",
													"type": "text"
												},
												{
													"key": "maxSendAttempts",
													"value": "2",
													"description": "`",
													"type": "text"
												},
												{
													"key": "retryInterval",
													"value": "10",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get recently queued message",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New text message was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update TextMsg: Error, resend",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ae68d45-1c1e-4d50-af79-1c5f3c9b0796",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "714eb47f-fee6-412b-b5f8-f78e56307a34",
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"var userAcct = pm.environment.get('testUser');\r",
													"\r",
													"pm.test(\"Textmsg update call was successful\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Textmsg next update time is later than now\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        var now = new Date();\r",
													"        var nextTime = new Date(jsonData.data.nextSendDateTime);\r",
													"        pm.expect(nextTime.getTime()).to.be.above(now.getTime());\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}&status=Error: TESTFAIL",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												},
												{
													"key": "status",
													"value": "Error: TESTFAIL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update TextMsg: Error, resend again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ae68d45-1c1e-4d50-af79-1c5f3c9b0796",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "714eb47f-fee6-412b-b5f8-f78e56307a34",
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"var userAcct = pm.environment.get('testUser');\r",
													"\r",
													"pm.test(\"Textmsg update call was successful\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Textmsg next update time should be zero\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        var nextTime = new Date(jsonData.data.nextSendDateTime);\r",
													"        pm.expect(nextTime.getTime()).to.eql(0);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}&status=Error: TESTFAIL",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												},
												{
													"key": "status",
													"value": "Error: TESTFAIL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get recently queued message after retries",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New text message was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Queue and send successfully",
							"item": [
								{
									"name": "Add message to queue",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New text message was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"         // this should be successful\r",
													"        pm.response.to.have.status(201);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message phone number is correct.\", function() {\r",
													"    var newDest = pm.environment.get('testTextMsgDest');\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.destNumber).to.not.eql(undefined);\r",
													"        pm.expect(jsonData.data.destNumber).to.eql(newDest);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message maxSendAttempts is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        console.log('jsonData.data.maxSendAttempts = ' + jsonData.data.maxSendAttempts);\r",
													"        pm.expect(jsonData.data.maxSendAttempts).to.not.eql(undefined);\r",
													"        pm.expect(jsonData.data.maxSendAttempts).to.eql('5');\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message retryInterval is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.retryInterval).to.not.eql(undefined);\r",
													"        pm.expect(jsonData.data.retryInterval).to.eql('10');\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Reading message GUID\", function(){\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.textmsgGUID).to.not.eql(undefined);\r",
													"        pm.variables.set(\"currentMessageGUID\", jsonData.data.textmsgGUID);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check saved message GUID\", function(){\r",
													"\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(pm.variables.get(\"currentMessageGUID\")).to.not.eql(undefined);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "messageText",
													"value": "Hi there, this is your reminder message! {{$guid}}",
													"type": "text"
												},
												{
													"key": "patientID",
													"value": "nu",
													"type": "text",
													"disabled": true
												},
												{
													"key": "destNumber",
													"value": "{{testTextMsgDest}}",
													"type": "text"
												},
												{
													"key": "sendService",
													"value": "LocalMobile",
													"type": "text"
												},
												{
													"key": "maxSendAttempts",
													"value": "5",
													"description": "`",
													"type": "text"
												},
												{
													"key": "retryInterval",
													"value": "10",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get recently queued message",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New text message was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update TextMsg: Error, resend",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ae68d45-1c1e-4d50-af79-1c5f3c9b0796",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "714eb47f-fee6-412b-b5f8-f78e56307a34",
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"var userAcct = pm.environment.get('testUser');\r",
													"\r",
													"pm.test(\"Textmsg update call was successful\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Textmsg next update time is later than now\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        var now = new Date();\r",
													"        var nextTime = new Date(jsonData.data.nextSendDateTime);\r",
													"        pm.expect(nextTime.getTime()).to.be.above(now.getTime());\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}&status=Error: TESTFAIL",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												},
												{
													"key": "status",
													"value": "Error: TESTFAIL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update TextMsg: Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ae68d45-1c1e-4d50-af79-1c5f3c9b0796",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "714eb47f-fee6-412b-b5f8-f78e56307a34",
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"var userAcct = pm.environment.get('testUser');\r",
													"\r",
													"pm.test(\"Textmsg update call was successful\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Textmsg next update time is now undefined\", function () {\r",
													"    if (userAcct == 'TestSA') {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.data.nextSendDateTime).to.eql(null);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"       pm.expect(1).to.eql(1);\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}&status=Success",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												},
												{
													"key": "status",
													"value": "Success"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get recently queued message after success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New text message was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(404);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"New message is correct.\", function() {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"textmsg.php"
											],
											"query": [
												{
													"key": "textmsgGUID",
													"value": "{{currentMessageGUID}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Queue and Delete Messages",
							"item": [
								{
									"name": "Queue and delete by GUID",
									"item": [
										{
											"name": "Add message to queue",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New text message was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"         // this should be successful\r",
															"        pm.response.to.have.status(201);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message phone number is correct.\", function() {\r",
															"    var newDest = pm.environment.get('testTextMsgDest');\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.data.destNumber).to.not.eql(undefined);\r",
															"        pm.expect(jsonData.data.destNumber).to.eql(newDest);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message maxSendAttempts is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        console.log('jsonData.data.maxSendAttempts = ' + jsonData.data.maxSendAttempts);\r",
															"        pm.expect(jsonData.data.maxSendAttempts).to.not.eql(undefined);\r",
															"        pm.expect(jsonData.data.maxSendAttempts).to.eql('5');\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message retryInterval is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.data.retryInterval).to.not.eql(undefined);\r",
															"        pm.expect(jsonData.data.retryInterval).to.eql('10');\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Reading message GUID\", function(){\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.data.textmsgGUID).to.not.eql(undefined);\r",
															"        pm.variables.set(\"currentMessageGUID\", jsonData.data.textmsgGUID);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Check saved message GUID\", function(){\r",
															"\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(pm.variables.get(\"currentMessageGUID\")).to.not.eql(undefined);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "messageText",
															"value": "Hi there, this is your reminder message! {{$guid}}",
															"type": "text"
														},
														{
															"key": "patientID",
															"value": "nu",
															"type": "text",
															"disabled": true
														},
														{
															"key": "destNumber",
															"value": "{{testTextMsgDest}}",
															"type": "text"
														},
														{
															"key": "sendService",
															"value": "LocalMobile",
															"type": "text"
														},
														{
															"key": "maxSendAttempts",
															"value": "5",
															"description": "`",
															"type": "text"
														},
														{
															"key": "retryInterval",
															"value": "10",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get recently added message",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New text message was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													],
													"query": [
														{
															"key": "textmsgGUID",
															"value": "{{currentMessageGUID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete texmsg by GUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2ae68d45-1c1e-4d50-af79-1c5f3c9b0796",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "714eb47f-fee6-412b-b5f8-f78e56307a34",
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"var userAcct = pm.environment.get('testUser');\r",
															"\r",
															"pm.test(\"Textmsg update call was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Textmsg delete returned the correct status\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        if (jsonData.count == 1) {\r",
															"            pm.expect(jsonData.data.lastSendStatus).to.eql('Deleted');\r",
															"        } else {\r",
															"            pm.expect(jsonData.count).to.eql(1);\r",
															"        }\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													],
													"query": [
														{
															"key": "textmsgGUID",
															"value": "{{currentMessageGUID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get recently queued message after success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New text message was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php?textmsgGUID={{currentMessageGUID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													],
													"query": [
														{
															"key": "textmsgGUID",
															"value": "{{currentMessageGUID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Queue and delete by texmsgID",
									"item": [
										{
											"name": "Add message to queue",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New text message was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"         // this should be successful\r",
															"        pm.response.to.have.status(201);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message phone number is correct.\", function() {\r",
															"    var newDest = pm.environment.get('testTextMsgDest');\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.data.destNumber).to.not.eql(undefined);\r",
															"        pm.expect(jsonData.data.destNumber).to.eql(newDest);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message maxSendAttempts is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        console.log('jsonData.data.maxSendAttempts = ' + jsonData.data.maxSendAttempts);\r",
															"        pm.expect(jsonData.data.maxSendAttempts).to.not.eql(undefined);\r",
															"        pm.expect(jsonData.data.maxSendAttempts).to.eql('5');\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message retryInterval is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.data.retryInterval).to.not.eql(undefined);\r",
															"        pm.expect(jsonData.data.retryInterval).to.eql('10');\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Reading message ID\", function(){\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.data.textmsgID).to.not.eql(undefined);\r",
															"        pm.variables.set(\"currentMessageID\", jsonData.data.textmsgID);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Check saved message ID\", function(){\r",
															"\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(pm.variables.get(\"currentMessageID\")).to.not.eql(undefined);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"       pm.expect(1).to.eql(1);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "messageText",
															"value": "Hi there, this is your reminder message! {{$guid}}",
															"type": "text"
														},
														{
															"key": "patientID",
															"value": "nu",
															"type": "text",
															"disabled": true
														},
														{
															"key": "destNumber",
															"value": "{{testTextMsgDest}}",
															"type": "text"
														},
														{
															"key": "sendService",
															"value": "LocalMobile",
															"type": "text"
														},
														{
															"key": "maxSendAttempts",
															"value": "5",
															"description": "`",
															"type": "text"
														},
														{
															"key": "retryInterval",
															"value": "10",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get recently added message",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New text message was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php?textmsgID={{currentMessageID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													],
													"query": [
														{
															"key": "textmsgID",
															"value": "{{currentMessageID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete texmsg by ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2ae68d45-1c1e-4d50-af79-1c5f3c9b0796",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "714eb47f-fee6-412b-b5f8-f78e56307a34",
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"var userAcct = pm.environment.get('testUser');\r",
															"\r",
															"pm.test(\"Textmsg update call was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"Textmsg delete returned the correct status\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        if (jsonData.count == 1) {\r",
															"            pm.expect(jsonData.data.lastSendStatus).to.eql('Deleted');\r",
															"        } else {\r",
															"            pm.expect(jsonData.count).to.eql(1);\r",
															"        }\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"    }\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php?textmsgID={{currentMessageID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													],
													"query": [
														{
															"key": "textmsgID",
															"value": "{{currentMessageID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get recently queued message after deletion",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1969d74f-5bfd-43eb-b953-80a5d45227a5",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New text message was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(404);\r",
															"    }\r",
															"});\r",
															"\r",
															"pm.test(\"New message is correct.\", function() {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
															"        // this should be successful\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/textmsg.php?textmsgID={{currentMessageID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"textmsg.php"
													],
													"query": [
														{
															"key": "textmsgID",
															"value": "{{currentMessageID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4ff6fd1-58ae-403c-af0f-74d61e94e9fb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d231c5d-f837-4f63-b94b-9c7732c425a0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Error Tests",
					"item": [
						{
							"name": "Get textmsg Access  Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get textmsg access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token check was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{InvalidToken_Format}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/textmsg.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"textmsg.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ICD API test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Get icd code by code and language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct code returned\", function() {\r",
											"    pm.expect(jsonData.data.icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data.icd10code).to.eql('R51');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?c=R51&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "c",
											"value": "R51"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by code match",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct codes returned\", function() {\r",
											"    pm.expect(jsonData.data[0].icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data[0].icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data[0].icd10code).to.eql('R51');\r",
											"    pm.expect(jsonData.data[1].icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data[1].icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data[1].icd10code).to.eql('R51');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?c=R51",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "c",
											"value": "R51"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by code regex match",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(5);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct codes returned\", function() {\r",
											"    jsonData.data.forEach(function(item, idx){\r",
											"        var regExpMatch = 'R5[1-5]$'\r",
											"        pm.expect(item.icd10code).to.not.eql(undefined);\r",
											"        pm.expect(item.icd10code).to.not.eql(null);\r",
											"        if (item.icd10code.match(regExpMatch) === null) {\r",
											"            console.log('Correct code failed for description: ' + item.icd10code);\r",
											"        }\r",
											"        pm.expect(item.icd10code.match(regExpMatch)).to.not.eql(null);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?c=R5[1-5]$&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "c",
											"value": "R5[1-5]$"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.be.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct codes returned\", function() {\r",
											"    jsonData.data.forEach(function(item, idx){\r",
											"        pm.expect(item.icd10code).to.not.eql(undefined);\r",
											"        pm.expect(item.icd10code).to.not.eql(null);\r",
											"        if (item.shortDescription.toLowerCase().indexOf('headache') <= 0) {\r",
											"            console.log('Correct code failed for description: ' + item.shortDescription);\r",
											"        }\r",
											"        pm.expect(item.shortDescription.toLowerCase().indexOf('headache')).to.be.above(-1);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?t=headache&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "t",
											"value": "headache"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by code search and language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct code returned\", function() {\r",
											"    pm.expect(jsonData.data.icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data.icd10code).to.eql('R51');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?q=R51&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "q",
											"value": "R51"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by code search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct codes returned\", function() {\r",
											"    pm.expect(jsonData.data[0].icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data[0].icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data[0].icd10code).to.eql('R51');\r",
											"    pm.expect(jsonData.data[1].icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data[1].icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data[1].icd10code).to.eql('R51');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?q=R51",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "q",
											"value": "R51"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by description search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.be.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct codes returned\", function() {\r",
											"    jsonData.data.forEach(function(item, idx){\r",
											"        pm.expect(item.icd10code).to.not.eql(undefined);\r",
											"        pm.expect(item.icd10code).to.not.eql(null);\r",
											"        if (item.shortDescription.toLowerCase().indexOf('headache') <= 0) {\r",
											"            console.log('Correct code failed for description: ' + item.shortDescription);\r",
											"        }\r",
											"        pm.expect(item.shortDescription.toLowerCase().indexOf('headache')).to.be.above(-1);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?q=headache&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "q",
											"value": "headache"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Patch test",
					"item": [
						{
							"name": "Get icd code to update by code match",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct codes returned\", function() {\r",
											"    pm.expect(jsonData.data.icd10code).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.icd10code).to.not.eql(null);\r",
											"    pm.expect(jsonData.data.icd10code).to.eql('R51');\r",
											"    pm.expect(jsonData.data.icd10index).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.icd10index).to.not.eql(null);\r",
											"    pm.variables.set(\"useCountIndex\", jsonData.data.icd10index);\r",
											"});\r",
											"\r",
											"pm.test(\"Update count saved\", function() {\r",
											"    pm.expect(jsonData.data.useCount).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.useCount).to.not.eql(null);\r",
											"    pm.variables.set(\"useCountBefore\", jsonData.data.useCount);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?c=R51&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "c",
											"value": "R51"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update icd code use count",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct value returned\", function() {\r",
											"    pm.expect(jsonData.data.useCount).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.useCount).to.not.eql(null);\r",
											"    pm.expect(pm.variables.get(\"useCountBefore\")).to.not.eql(undefined);\r",
											"    pm.expect(pm.variables.get(\"useCountBefore\")).to.not.eql(null);\r",
											"    pm.expect(parseInt(jsonData.data.useCount)).to.be.above(parseInt(pm.variables.get(\"useCountBefore\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5358da0f-d5c1-4f72-a4a2-6370255e0ad4",
										"exec": [
											"pm.expect(pm.variables.get(\"useCountIndex\")).to.eql('R51');\r",
											"pm.expect(pm.variables.get(\"useCountBefore\")).to.not.eql(undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?icd10index={{useCountIndex}}&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "icd10index",
											"value": "{{useCountIndex}}"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get icd code by code match",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0faf650e-1091-40d0-9f6d-06951bcefeef",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Code search succesful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData.count).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct value returned\", function() {\r",
											"    pm.expect(jsonData.data.useCount).to.not.eql(undefined);\r",
											"    pm.expect(jsonData.data.useCount).to.not.eql(null);\r",
											"    pm.expect(pm.variables.get(\"useCountBefore\")).to.not.eql(undefined);\r",
											"    pm.expect(pm.variables.get(\"useCountBefore\")).to.not.eql(null);\r",
											"    pm.expect(parseInt(jsonData.data.useCount)).to.be.above(parseInt(pm.variables.get(\"useCountBefore\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php?c=R51&language=en",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									],
									"query": [
										{
											"key": "c",
											"value": "R51"
										},
										{
											"key": "language",
											"value": "en"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Error Tests",
					"item": [
						{
							"name": "Get ICD Access  Missing Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token was successful\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ICD access Invalid Token Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Invalid token check was successful\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{InvalidToken_Format}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/icd.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"icd.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Patient API Test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Get an existing patient",
							"item": [
								{
									"name": "Get Existing Patient by clinicPatientID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Reading existing patient info was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"        pm.expect(jsonData.data.clinicPatientID).to.eql('PT-GEN-000055');\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/patient.php?=&clinicPatientID=PT-GEN-000055",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"patient.php"
											],
											"query": [
												{
													"key": "",
													"value": ""
												},
												{
													"key": "clinicPatientID",
													"value": "PT-GEN-000055"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create, Get, Delete new patient",
							"item": [
								{
									"name": "Post new patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"New test patient added successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(201);\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"        pm.expect(jsonData.data.clinicPatientID).not.eql(undefined);\r",
													"        pm.expect(jsonData.data.clinicPatientID).not.eql(null);\r",
													"        pm.variables.set('newPatientID',jsonData.data.clinicPatientID);\r",
													"        pm.expect(pm.variables.get('newPatientID')).to.eql(jsonData.data.clinicPatientID);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "x-piClinic-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "lastName",
													"value": "TEST_LastName",
													"type": "text"
												},
												{
													"key": "firstName",
													"value": "TEST_FirstName",
													"type": "text"
												},
												{
													"key": "sex",
													"value": "M",
													"type": "text"
												},
												{
													"key": "clinicPatientID",
													"value": "PT-TEST-{{$randomInt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/patient.php",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"patient.php"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get New Patient by clinicPatientID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Reading new patient was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.expect(jsonData.count).to.eql(1);\r",
													"        pm.expect(jsonData.data.clinicPatientID).to.eql(pm.variables.get('newPatientID'));\r",
													"    } else if (userAcct == 'TestCS') {\r",
													"        /* The TestCS account has permission to read patients but cannot create the new one\r",
													"         *  so this test returns 404 because they could not create a new one and assign\r",
													"         *  the new ID to the variable used in this test's parameters.\r",
													"         */\r",
													"        pm.response.to.have.status(404);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"patient.php"
											],
											"query": [
												{
													"key": "clinicPatientID",
													"value": "{{newPatientID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete New Patient by clinicPatientID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Deleting new patient was successful\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/patient.php?=&clinicPatientID={{newPatientID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"patient.php"
											],
											"query": [
												{
													"key": "",
													"value": ""
												},
												{
													"key": "clinicPatientID",
													"value": "{{newPatientID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Patient by clinicPatientID after DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
												"exec": [
													"var userAcct = pm.environment.get('testUser');\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Deleted patient was not returned.\", function () {\r",
													"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
													"        // this should be successful\r",
													"        pm.response.to.have.status(404);\r",
													"    } else {\r",
													"        // the user doesn't have permission to do this.\r",
													"        pm.response.to.have.status(401);\r",
													"        pm.expect(jsonData.count).to.eql(0);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-piClinic-token",
												"type": "text",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/api/patient.php?=&clinicPatientID={{newPatientID}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"patient.php"
											],
											"query": [
												{
													"key": "",
													"value": ""
												},
												{
													"key": "clinicPatientID",
													"value": "{{newPatientID}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Patch action test",
							"item": [
								{
									"name": "Set up for patch test",
									"item": [
										{
											"name": "Post another new patient",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(201);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        pm.expect(jsonData.data.clinicPatientID).not.eql(undefined);\r",
															"        pm.expect(jsonData.data.clinicPatientID).not.eql(null);\r",
															"        pm.variables.set('newPatientID',jsonData.data.clinicPatientID);\r",
															"        pm.expect(pm.variables.get('newPatientID')).to.eql(jsonData.data.clinicPatientID);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-piClinic-token",
														"value": "{{token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "lastName",
															"value": "TEST_LastName",
															"type": "text"
														},
														{
															"key": "firstName",
															"value": "TEST_FirstName",
															"type": "text"
														},
														{
															"key": "sex",
															"value": "M",
															"type": "text"
														},
														{
															"key": "clinicPatientID",
															"value": "PT-TEST-{{$randomInt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check patientNationalID",
									"item": [
										{
											"name": "Patch new patient patientNationalID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															" pm.variables.set('patchTestField','patientNationalID');\r",
															" var randNum = Math.floor(Math.random() * Math.floor(100000));\r",
															" pm.variables.set('patchTestValue','9999-99999-' + randNum.toString());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check lastName",
									"item": [
										{
											"name": "Patch new patient lastName",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															"var varRandomString = pm.environment.get('fnRandomString');\r",
															"var randomString = eval('(' + varRandomString + ')');\r",
															"\r",
															" pm.variables.set('patchTestField', 'lastName');\r",
															" pm.variables.set('patchTestValue', randomString(255));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check lastName2",
									"item": [
										{
											"name": "Patch new patient lastName2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															"var varRandomString = pm.environment.get('fnRandomString');\r",
															"var randomString = eval('(' + varRandomString + ')');\r",
															"\r",
															"pm.variables.set('patchTestField','lastName2');\r",
															"pm.variables.set('patchTestValue',randomString(255));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check firstName",
									"item": [
										{
											"name": "Patch new patient firstName",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															"var varRandomString = pm.environment.get('fnRandomString');\r",
															"var randomString = eval('(' + varRandomString + ')');\r",
															"\r",
															"pm.variables.set('patchTestField','firstName');\r",
															"pm.variables.set('patchTestValue', randomString(255));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check middleInitial",
									"item": [
										{
											"name": "Patch new patient middleInitial",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															"var varRandomString = pm.environment.get('fnRandomString');\r",
															"var randomString = eval('(' + varRandomString + ')');\r",
															"\r",
															"\r",
															"pm.variables.set('patchTestField','middleInitial');\r",
															"pm.variables.set('patchTestValue', randomString(255));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check homeAddress1",
									"item": [
										{
											"name": "Patch new patient homeAddress1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															"var varRandomString = pm.environment.get('fnRandomString');\r",
															"var randomString = eval('(' + varRandomString + ')');\r",
															"\r",
															"pm.variables.set('patchTestField','homeAddress1');\r",
															"pm.variables.set('patchTestValue', randomString(255));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Patch and check homeAddress2",
									"item": [
										{
											"name": "Patch new patient homeAddress2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d2aecf7-be99-429e-83b4-a804b605427f",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"New test patient added successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200)\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134609e-e43d-4d08-bc5b-b648f0b53c5a",
														"exec": [
															"var varRandomString = pm.environment.get('fnRandomString');\r",
															"var randomString = eval('(' + varRandomString + ')');\r",
															"\r",
															"pm.variables.set('patchTestField','homeAddress2');\r",
															"pm.variables.set('patchTestValue', randomString(16));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/api/patient.php?{{patchTestField}}={{patchTestValue}}&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "{{patchTestField}}",
															"value": "{{patchTestValue}}"
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get patched patient to test update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Reading new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(1);\r",
															"        var fieldName = pm.variables.get('patchTestField');\r",
															"        pm.expect(jsonData.data[fieldName]).to.eql(pm.variables.get('patchTestValue'));\r",
															"    } else if (userAcct == 'TestCS') {\r",
															"        /* The TestCS account has permission to read patients but cannot create the new one\r",
															"         *  so this test returns 404 because they could not create a new one and assign\r",
															"         *  the new ID to the variable used in this test's parameters.\r",
															"         */\r",
															"        pm.response.to.have.status(404);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Clean up after patch test",
									"item": [
										{
											"name": "Delete another new Patient by clinicPatientID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
														"exec": [
															"var userAcct = pm.environment.get('testUser');\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"pm.test(\"Deleting new patient was successful\", function () {\r",
															"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
															"        // this should be successful\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    } else {\r",
															"        // the user doesn't have permission to do this.\r",
															"        pm.response.to.have.status(401);\r",
															"        pm.expect(jsonData.count).to.eql(0);\r",
															"    }\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-piClinic-token",
														"type": "text",
														"value": "{{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/api/patient.php?=&clinicPatientID={{newPatientID}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"patient.php"
													],
													"query": [
														{
															"key": "",
															"value": ""
														},
														{
															"key": "clinicPatientID",
															"value": "{{newPatientID}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Visit API Test",
			"item": [
				{
					"name": "Session Open",
					"item": [
						{
							"name": "Get Test User token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed713fa2-ae3d-46f3-aa9c-38838bd026ba",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"Login was successful\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{testUser}}&password={{testUserPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{testUser}}"
										},
										{
											"key": "password",
											"value": "{{testUserPW}}"
										}
									]
								},
								"description": "Logs in as Test User"
							},
							"response": []
						},
						{
							"name": "Get Session Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"pm.test(\"Access check was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SystemAdmin token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d02fe32-8ed9-4f1b-aa4b-9f9d0f97c059",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.variables.set(\"SAtoken\", jsonData.data.token);\r",
											"\r",
											"pm.test(\"System Admin login was successful\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php?username={{systemAdminUser}}&password={{systemAdminPW}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									],
									"query": [
										{
											"key": "username",
											"value": "{{systemAdminUser}}"
										},
										{
											"key": "password",
											"value": "{{systemAdminPW}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Success Tests",
					"item": [
						{
							"name": "Get a random patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
										"exec": [
											"var userAcct = pm.environment.get('testUser');\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Reading existing patient info was successful\", function () {\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.expect(jsonData.count > 1).to.eql(true);\r",
											"        var ptIdx = Math.floor((Math.random() * jsonData.count));\r",
											"        pm.expect(ptIdx >= 0).to.eql(true);\r",
											"        pm.expect(ptIdx < jsonData.count).to.eql(true);\r",
											"        var thisPatient = jsonData.data[ptIdx];\r",
											"        pm.variables.set('patientID',thisPatient.clinicPatientID);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.count).to.eql(0);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get random doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284f1c2c-099c-4131-b059-7ce9ec4438c5",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Get random doctor successful\", function() {\r",
											"    var userAcct = pm.environment.get('testUser');\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.expect(jsonData.count > 1).to.eql(true);\r",
											"        var drIdx = Math.floor((Math.random() * jsonData.count));\r",
											"        pm.expect(drIdx >= 0).to.eql(true);\r",
											"        pm.expect(drIdx < jsonData.count).to.eql(true);\r",
											"        var thisDoctor = jsonData.data[drIdx];\r",
											"        pm.variables.set('drUsername',thisDoctor.username);\r",
											"        pm.variables.set('drFullName',thisDoctor.firstName + thisDoctor.lastName);\r",
											"    } else if  (userAcct == 'TestCS') {\r",
											"        // staff cam read, but can't create so the user is not found\r",
											"        pm.response.to.have.status(404);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/staff.php?position=Doctor%",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"staff.php"
									],
									"query": [
										{
											"key": "position",
											"value": "Doctor%"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new visit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d479e5e2-a89b-4287-a28e-875b838b4f9d",
										"exec": [
											"var userAcct = pm.environment.get('testUser');\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Create new visit was successful\", function () {\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(201);\r",
											"        pm.expect(jsonData.count).to.eql(1);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.count).to.eql(0);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "visitType",
											"value": "AUTOTEST",
											"type": "text"
										},
										{
											"key": "clinicPatientID",
											"value": "{{patientID}}",
											"type": "text"
										},
										{
											"key": "staffUsername",
											"value": "{{drUsername}}",
											"type": "text"
										},
										{
											"key": "staffName",
											"value": "{{drFullName}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/visit.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"visit.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a random patient Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8b81d9d-4ad0-4043-9096-055864c33dc6",
										"exec": [
											"var userAcct = pm.environment.get('testUser');\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Reading existing patient info was successful\", function () {\r",
											"    if ((userAcct == 'TestSA') || (userAcct == 'TestCA') || (userAcct == 'TestCS')) {\r",
											"        // this should be successful\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.expect(jsonData.count > 1).to.eql(true);\r",
											"        var ptIdx = Math.floor((Math.random() * jsonData.count));\r",
											"        pm.expect(ptIdx >= 0).to.eql(true);\r",
											"        pm.expect(ptIdx < jsonData.count).to.eql(true);\r",
											"        var thisPatient = jsonData.data[ptIdx];\r",
											"        pm.variables.set('patientID',thisPatient.clinicPatientID);\r",
											"    } else {\r",
											"        // the user doesn't have permission to do this.\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.count).to.eql(0);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-piClinic-token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/patient.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"patient.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Session Close",
					"item": [
						{
							"name": "Close current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Session Access after logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9746528d-2e17-4c7d-b744-3e720334bcb6",
										"exec": [
											"postman.setEnvironmentVariable(\"token\", null);",
											"",
											"pm.test(\"Access failed\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-piClinic-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close System Admin session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaa1cba2-7814-4be5-8931-c54e2dfc4b44",
										"exec": [
											"pm.test(\"SystemAdmin Logout was successful\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-piClinic-token",
										"type": "text",
										"value": "{{SAtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/api/session.php",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"session.php"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}